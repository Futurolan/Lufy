<?php

/**
 * Partner
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    lufy
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Partner extends BasePartner
{
	public function updatePosition(array $post)
	{
		$size = count($post);
		for($i=1; $i<=$size; $i++):
		$q = Doctrine_Query::create()
		->update('partner')
		->where('id_partner = ?', $post[$i][id])
		->set('position ',$post[$i][position])
		->execute();
		endfor;
	}

	public function setVisible($partner_id)
	{
		Doctrine_Query::create()
		->update('partner')
		->set('status', '?', '1')
		->where('id_partner = ' . $partner_id)
		->execute();
	}

	public function setHidden($partner_id)
	{
		Doctrine_Query::create()
		->update('partner')
		->set('status', '?', '0')
		->where('id_partner = ' . $partner_id)
		->execute();
	}
	
	
	

	/* addon berduj */

	/**
	 *
	 * Retourne le chemin absolu (filesystem) du repertoire contenant les images (en fonction de la taille d'image souhaitée) ...
	 * @param $size
	 */
	public static function getLogoDir($size=100)
	{

		return sfConfig::get('sf_upload_dir').'/partenaires/'.$size.'/';
	}

	/**
	 *
	 * Retourne le chemin (site web) du repertoire contenant les images (en fonction de la taille d'image souhaitée) ...
	 * @param unknown_type $size
	 */
	public static function getLogoPath($size=100)
	{
		return '/uploads/partenaires/'.$size.'/';
	}

	public function save(Doctrine_Connection $conn = null)
	{
		parent::save($conn);
		$sizes=sfConfig::get('app_partenaire_logo');

		if (file_exists(self::getLogoDir('temp').$this->getLogourl()))
		{
			// Copier et redimensionner dans les bons repertoires
			foreach (array_keys($sizes) as $s)
			{
				$this->generateLogo($s);
			}
			@unlink (self::getLogoDir('temp').$this->getLogourl());
		}

		if ($this->getLogourl() && ($this->getLogourl() != $this->generateLogoName()))
		{
			foreach (array_keys($sizes) as $s)
			{
				rename (self::getLogoDir($s).$this->getLogourl() , self::getLogoDir($s).$this->generateLogoName() );
			}
			$this->setLogourl($this->generateLogoName());
			parent::save();
		}
	}


	public function generateLogo($repertoire)
	{
		$array_size=sfConfig::get('app_partenaire_logo');
		if ($this->getLogourl() && is_file(self::getLogoDir('temp').$this->getLogourl() ))
		{
			$size_vignette_x= $array_size[$repertoire]['max_x'];
			$size_vignette_y= $array_size[$repertoire]['max_y'];

			$s=getimagesize( self::getLogoDir('temp').$this->getLogourl() );
				
			$vignette = new sfImage( self::getLogoDir('temp').$this->getLogourl() ,'');
				
			if ( ( $size_vignette_x && $size_vignette_x < $s[0] )  || ($size_vignette_y && $size_vignette_y < $s[1] ) )
			{
				$ratio1=$size_vignette_x / $s[0];
				$ratio2=$size_vignette_y / $s[1];

				if ($ratio1 && $ratio2)
				{
					$ratio= ($ratio1<$ratio2) ? $ratio1 : $ratio2;
				}
				else
				{
					$ratio = $ratio1 + $ratio2 ; // Au moin  1 des deux est a 0
				}
				$vignette->resize( $s[0] * $ratio , $s[1] * $ratio  ) ;
			}
			$vignette->saveAs(self::getLogoDir($repertoire).$this->getLogourl());
		}
	}

	public function generateLogoName()
	{
		return $this->getIdPartner() .'-'. berdujtools::slugify($this->getName()).'.jpg';
	}

	public function postDelete($values)
	{
		$sizes=sfConfig::get('app_partenaire_logo');
		foreach (array_keys($sizes) as $s)
		{
			@unlink (self::getLogoDir($s).$this->getLogourl() );
		}
		@unlink (self::getLogoDir('temp').$this->getLogourl() );
	}
	
	public function getSizedLogourl($size)
	{
		return $this->getLogoPath($size).'/'. $this->getLogourl();		
	}

	
}